package simpledb.execution;

import simpledb.storage.*;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    /* The predicate to use to join the children */
    private JoinPredicate predicate;
    /* Iterator for the left(outer) relation to join */
    private OpIterator child1;
    /* Iterator for the right(inner) relation to join */
    private OpIterator child2;
    private TupleDesc tupleDesc;
    private Tuple t1;
    private Tuple t2;
    private int t1Index ;
    private int t2Index ;

    private Map<String, List<Tuple>> map;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;

        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());


    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int field1 = predicate.getField1();
        return child1.getTupleDesc().getFieldName(field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int field2 = predicate.getField2();
        return child2.getTupleDesc().getFieldName(field2);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here

        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();

        super.open();
    }

    public void close() {
        // some code goes here
        child1.close();
        child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        if (predicate.getOperator().equals(Predicate.Op.EQUALS)) {
            if (map == null) {
                map = buildHashTableForChild1();
            }
            return probe();
        }

        while (t1 != null || child1.hasNext()) {
            if (t1 == null)
                t1 = child1.next();
            while (child2.hasNext() ) {
                Tuple t2 = child2.next();
                if (predicate.filter(t1, t2)) {
                    Tuple tuple = new Tuple(tupleDesc);
                    Iterator<Field> it1 = t1.fields();
                    Iterator<Field> it2 = t2.fields();
                    int i = 0;
                    while (it1.hasNext()) {
                        tuple.setField(i ++, it1.next());
                    }
                    while (it2.hasNext()) {
                        tuple.setField(i ++, it2.next());
                    }
                    return tuple;
                }
            }
            child2.rewind();
            t1 = null;
        }

        return null;
    }

    private Tuple probe() throws TransactionAbortedException, DbException {
        while (t2 != null || child2.hasNext()) {
            if (t2 == null) {
                t2 = child2.next();
            }
            Field field = t2.getField(predicate.getField2());
            String key = "";
            if (field instanceof IntField) {
                IntField intField = (IntField)field;
                key = String.valueOf(intField.getValue());
            } else {
                StringField stringField = (StringField) field;
                key = stringField.getValue();
            }
            if (map.containsKey(key)) {
                List<Tuple> tupleList = map.get(key);
                if (t1Index >= tupleList.size()) {
                    if (child2.hasNext()) {
                        t2 = child2.next();
                        t1Index = 0;
                    } else {
                        t2 = null;
                        t1Index = 0;
                        return null;
                    }
                }
                for (int i = t1Index; i < tupleList.size(); i++) {
                    Tuple tup1 = tupleList.get(i);
                    t1Index ++;
                    if (predicate.filter(tup1, t2)) {
                        Tuple tuple = new Tuple(tupleDesc);
                        Iterator<Field> it1 = tup1.fields();
                        Iterator<Field> it2 = t2.fields();
                        int j = 0;
                        while (it1.hasNext()) {
                            tuple.setField(j ++, it1.next());
                        }
                        while (it2.hasNext()) {
                            tuple.setField(j ++, it2.next());
                        }
                        return tuple;
                    }
                }
                t2 = null;
                t1Index = 0;
            } else {
                t2 = null;
                t1Index = 0;
            }
        }
        return null;
    }

    private Map<String, List<Tuple>> buildHashTableForChild1() throws TransactionAbortedException, DbException {
        Map<String, List<Tuple>> hashTable = new HashMap<>();
        while (child1.hasNext()) {
            Tuple t = child1.next();
            int field1 = predicate.getField1();
            Field field = t.getField(field1);
            String key = "";
            if (field instanceof IntField) {
                IntField intField = (IntField)field;
                key = String.valueOf(intField.getValue());
            } else {
                StringField stringField = (StringField) field;
                key = stringField.getValue();
            }
            if (!hashTable.containsKey(key)) {
                hashTable.put(key, new ArrayList<>());
            }
            hashTable.get(key).add(t);
        }
        return hashTable;
    }

    private void buildHashTableForChild2() throws TransactionAbortedException, DbException {
        while (child2.hasNext()) {
            Tuple t = child2.next();
            int field1 = predicate.getField1();
            Field field = t.getField(field1);
            String key = "";
            if (field instanceof IntField) {
                IntField intField = (IntField)field;
                key = String.valueOf(intField.getValue());
            } else {
                StringField stringField = (StringField) field;
                key = stringField.getValue();
            }
            if (!map.containsKey(key)) {
                map.put(key, new ArrayList<>());
            }
            map.get(key).add(t);
        }
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {this.child1, this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        if (this.child1 != children[0]) {
            this.child1 = children[0];
        }
        if (children.length > 1 && this.child2 != children[1]) {
            this.child2 = children[1];
        }
    }

}
